// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
typedef SWIFT_ENUM(NSInteger, ConversantAdFormat) {
  ConversantAdFormatMobileBannerAd = 0,
  ConversantAdFormatLeaderboardAd = 1,
  ConversantAdFormatMediumRectangleAd = 2,
  ConversantAdFormatFullscreenAd = 3,
  ConversantAdFormatPhonePortrait = 4,
  ConversantAdFormatPhoneLandscape = 5,
  ConversantAdFormatTabletPortrait = 6,
  ConversantAdFormatTabletLandscape = 7,
};

@protocol ConversantBannerAdDelegate;
@class ConversantConfiguration;
@class NSCoder;
@class NSLayoutConstraint;
@class UITraitCollection;

/// Master View for Conversant Ads.  Use this to create an ad and monitor its progress.
SWIFT_CLASS("_TtC13ConversantSDK16ConversantAdView")
@interface ConversantAdView : UIView
@property (nonatomic, strong) IBOutlet id <ConversantBannerAdDelegate> _Null_unspecified adDelegate;
@property (nonatomic, strong) ConversantConfiguration * _Null_unspecified configuration;
@property (nonatomic) BOOL clipsToBounds;
@property (nonatomic) CGFloat alpha;
/// Confirmation that the ad is ready for display.
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic) CGRect frame;
/// Initialise Conversant Ad View with an Ad Type and a Delegate
/// \param adFormat The Type of ad
///
/// \param delegate The delegate that will receive callbacks during the ad process
///
- (nonnull instancetype)initWithAdFormat:(enum ConversantAdFormat)adFormat delegate:(id <ConversantBannerAdDelegate> _Nullable)delegate;
/// Initialise Conversant Ad View with a desired frame.  This will automatically provide the correct ad-type to fit within the given frame.  This is the recommended method for programmatically adding a ConversantAdView to your application.  If you are using storyboards, you should storyboard your ad in instead by setting the view class to be a ConversantAdView.
/// \param frame The frame for the ad
///
/// \param configuration The configuration for the ad.
///
/// \param delegate The delegate that will receive callbacks during the ad process
///
- (nonnull instancetype)initWithFrame:(CGRect)frame delegate:(id <ConversantBannerAdDelegate> _Nullable)delegate;
/// Initialise Conversant Ad View with a desired frame.  This will automatically provide the correct ad-type to fit within the given frame.  This is the recommended method for programmatically adding a ConversantAdView to your application.  If you are using storyboards, you should storyboard your ad in instead by setting the view class to be a ConversantAdView.
/// \param frame The frame for the ad
///
/// \param delegate The delegate that will receive callbacks during the ad process
///
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(ConversantConfiguration * _Nonnull)configuration delegate:(id <ConversantBannerAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Initializing with a frame will only lead to a fatal error.  A delegate is required to communicate readiness of the
/// ad.
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// Used for embedding adViews in storyboards.  This is the preferred method.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// User this to fetch the ad before displaying
/// If you have autoLoad on in your configuration, this is automatically called when the ad is drawn
- (void)fetch;
/// After fetching the ad, this will display it, which unhides the ad in your view
/// If you have autoDisplay on in your configuration, this is automatically called after the ad is loaded.
- (void)display;
/// Adding a subview is only allowed if the subview is a WebViewContainer, and there isnâ€™t already another one.
- (void)addSubview:(UIView * _Nonnull)view;
/// Adding constraints to a ConversantAdView is restricted.  Do not call this function
- (void)addConstraint:(NSLayoutConstraint * _Nonnull)constraint;
- (void)addConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints;
/// respond to orientation changes
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)removeFromSuperview;
@end

@class ConversantError;

SWIFT_PROTOCOL("_TtP13ConversantSDK26ConversantBannerAdDelegate_")
@protocol ConversantBannerAdDelegate <NSObject>
@optional
- (void)bannerAdLoadFailedWithAd:(ConversantAdView * _Nonnull)ad error:(ConversantError * _Nonnull)error;
- (void)bannerAdLoadCompleteWithAd:(ConversantAdView * _Nonnull)ad;
- (void)bannerAdWillPresentScreenWithAd:(ConversantAdView * _Nonnull)ad;
- (void)bannerAdWillDismissScreenWithAd:(ConversantAdView * _Nonnull)ad;
- (void)bannerAdDidDismissScreenWithAd:(ConversantAdView * _Nonnull)ad;
@end

enum ConversantLogLevel : NSInteger;

/// This is how you create custom configurations for your Conversant Ads
SWIFT_CLASS("_TtC13ConversantSDK23ConversantConfiguration")
@interface ConversantConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// The shared default configuration for Conversant Ads
/// This is used by any ads that are not initâ€™ed with a custom configuration (such as storyboarded ads), so update this in your app delegate didFinishLaunching for the storyboarded ads to work as you desire.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConversantConfiguration * _Nonnull defaultConfiguration;)
+ (ConversantConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// For internal use. URL for fetching ads.
@property (nonatomic, copy) NSString * _Nonnull endPoint;
/// This is where you set the GUID provided by Conversant for your app.  You must set this before any ads are loaded or instantiated from the Storyboard.
/// A good placement for this is within AppDelegate::applicationDidFinishLaunching
@property (nonatomic, copy) NSString * _Null_unspecified applicationId;
/// Ads with autoload set to true will load an ad as soon as they are layed out.  Primarily used for storyboarding ads.
/// default:true
@property (nonatomic) BOOL autoLoad;
/// Ads with autodisplay will display the ad as soon as it is loaded
/// default:true
@property (nonatomic) BOOL autoDisplay;
/// For internal use.  Override the media ID to request specific media
@property (nonatomic, copy) NSString * _Nullable MIDOverride;
/// For internal use. Send an IP address for geo emulation
@property (nonatomic, copy) NSString * _Nullable ip;
/// For internal use. Request budget override
@property (nonatomic) BOOL budget;
/// For internal use. Request budget override
@property (nonatomic) BOOL freq_cap_pass;
/// For internal use. Request campaign
@property (nonatomic, copy) NSString * _Nullable cid;
/// For internal use. Debug request
@property (nonatomic) BOOL debug;
/// level for logging
@property (nonatomic) enum ConversantLogLevel logLevel;
/// Timeout for ad loading
@property (nonatomic) NSTimeInterval adLoadTimeout;
/// Initialize a new ConversantConfiguration
/// You may want to use this to create a configuration to pass to your Conversant Ads, especially if you do not
/// want to use the default configuration for those ads.  You can then pass the configuration to the Ad when you
/// initialize it.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13ConversantSDK15ConversantError")
@interface ConversantError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, ErrorType) {
  ErrorTypeImproperConfiguration = 0,
  ErrorTypeLoadFailure = 1,
};

@protocol ConversantInterstitialAdDelegate;
@class UIViewController;

SWIFT_CLASS("_TtC13ConversantSDK24ConversantInterstitialAd")
@interface ConversantInterstitialAd : NSObject
@property (nonatomic, strong) id <ConversantInterstitialAdDelegate> _Nullable adDelegate;
@property (nonatomic, strong) ConversantConfiguration * _Nonnull configuration;
/// Initialise Conversant Interstital Ad with a delegate.  This is recommended way of creating an Interstital Ad
/// \param delegate The delegate that will receive callbacks during the ad process
///
- (nonnull instancetype)initWithDelegate:(id <ConversantInterstitialAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Load the Conversant Interstitial Ad.  Perform this in advance of presenting it.
- (void)fetch;
@property (nonatomic, readonly) BOOL isReady;
/// Present the interstitial ad from the given view controller
/// \param from The view controller from which you would like to present the interstitial ad
///
- (void)presentFrom:(UIViewController * _Nonnull)vc;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP13ConversantSDK32ConversantInterstitialAdDelegate_")
@protocol ConversantInterstitialAdDelegate <NSObject>
@optional
- (void)interstitialAdLoadFailedWithAd:(ConversantInterstitialAd * _Nonnull)ad error:(ConversantError * _Nonnull)error;
- (void)interstitialAdLoadCompleteWithAd:(ConversantInterstitialAd * _Nonnull)ad;
- (void)interstitialAdDidDisappearWithAd:(ConversantInterstitialAd * _Nonnull)ad;
- (void)interstitialAdWillDisappearWithAd:(ConversantInterstitialAd * _Nonnull)ad;
- (void)interstitialAdWillAppearWithAd:(ConversantInterstitialAd * _Nonnull)ad;
@end

typedef SWIFT_ENUM(NSInteger, ConversantLogLevel) {
  ConversantLogLevelFatal = 1,
  ConversantLogLevelError = 2,
  ConversantLogLevelWarn = 4,
  ConversantLogLevelInfo = 8,
  ConversantLogLevelDebug = 16,
  ConversantLogLevelVerbose = 32,
};


@interface UIDevice (SWIFT_EXTENSION(ConversantSDK))
@end


@interface UIView (SWIFT_EXTENSION(ConversantSDK))
@end

#pragma clang diagnostic pop
